name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: diogo-costa-silva/diogo-costa-silva.github.io
          token: ${{ secrets.DEPLOY_TOKEN }}
          path: pages-repo
          fetch-depth: 0

      - name: Deploy to GitHub Pages repository
        env:
          TARGET_REPO: diogo-costa-silva/diogo-costa-silva.github.io
        run: |
          set -euo pipefail

          # Validate DEPLOY_TOKEN exists
          if [ -z "${{ secrets.DEPLOY_TOKEN }}" ]; then
            echo "Error: DEPLOY_TOKEN secret is not set"
            exit 1
          fi

          echo "Deploying to ${TARGET_REPO}..."

          # Configure git in target repo
          cd pages-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Remove all content except .git directory
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +

          # Copy all content from source (except .git and pages-repo directory itself)
          cd ..
          shopt -s dotglob nullglob
          for item in *; do
            if [[ "$item" != "pages-repo" && "$item" != ".git" ]]; then
              cp -r "$item" pages-repo/
            fi
          done

          cd pages-repo

          # Keep only static.yml workflow in target repo
          if [ -d ".github/workflows" ]; then
            find .github/workflows -type f ! -name 'static.yml' -delete
          fi

          # Ensure static.yml exists for GitHub Pages deployment
          if [ ! -f ".github/workflows/static.yml" ]; then
            echo "Creating static.yml workflow for GitHub Pages..."
            mkdir -p .github/workflows
            cat > .github/workflows/static.yml << 'EOF'
          # Simple workflow for deploying static content to GitHub Pages
          name: Deploy static content to Pages

          on:
            # Runs on pushes targeting the default branch
            push:
              branches: ["main"]

            # Allows you to run this workflow manually from the Actions tab
            workflow_dispatch:

          # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
          permissions:
            contents: read
            pages: write
            id-token: write

          # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
          # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
          concurrency:
            group: "pages"
            cancel-in-progress: false

          jobs:
            # Single deploy job since we're just deploying
            deploy:
              environment:
                name: github-pages
                url: ${{ steps.deployment.outputs.page_url }}
              runs-on: ubuntu-latest
              steps:
                - name: Checkout
                  uses: actions/checkout@v4

                - name: Setup Pages
                  uses: actions/configure-pages@v5

                - name: Upload artifact
                  uses: actions/upload-pages-artifact@v3
                  with:
                    # Upload entire repository
                    path: '.'

                - name: Deploy to GitHub Pages
                  id: deployment
                  uses: actions/deploy-pages@v4
          EOF
          fi

          # Show what changed
          echo "Changes to be deployed:"
          git status

          # Commit and push if there are changes
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to deploy"
          else
            SOURCE_COMMIT=$(git -C .. rev-parse --short HEAD)
            SOURCE_MESSAGE=$(git -C .. log -1 --pretty=%s)
            git commit -m "Deploy from webfolio-v1-vanilla @ ${SOURCE_COMMIT}: ${SOURCE_MESSAGE}"
            git push origin main
            echo "Successfully deployed to ${TARGET_REPO}"
          fi
